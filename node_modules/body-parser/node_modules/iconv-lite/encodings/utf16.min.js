function utf16beEncoder(a){return{write:utf16beEncoderWrite,end:function(){}}}function utf16beEncoderWrite(a){for(var b=new Buffer(a,"ucs2"),c=0;c<b.length;c+=2){var d=b[c];b[c]=b[c+1],b[c+1]=d}return b}function utf16beDecoder(a){return{write:utf16beDecoderWrite,end:function(){},overflowByte:-1}}function utf16beDecoderWrite(a){if(0==a.length)return"";var b=new Buffer(a.length+1),c=0,d=0;for(-1!==this.overflowByte&&(b[0]=a[0],b[1]=this.overflowByte,c=1,d=2);c<a.length-1;c+=2,d+=2)b[d]=a[c+1],b[d+1]=a[c];return this.overflowByte=c==a.length-1?a[a.length-1]:-1,b.slice(0,d).toString("ucs2")}function utf16Encoder(a){a=a||{};var b=this.getCodec(a.use||"utf-16be");if(!b.bom)throw new Error("iconv-lite: in UTF-16 encoder, 'use' parameter should be either UTF-16BE or UTF16-LE.");return{write:utf16EncoderWrite,end:utf16EncoderEnd,bom:b.bom,internalEncoder:b.encoder(a)}}function utf16EncoderWrite(a){var b=this.internalEncoder.write(a);return this.bom&&(b=Buffer.concat([this.bom,b]),this.bom=null),b}function utf16EncoderEnd(){return this.internalEncoder.end()}function utf16Decoder(a){return{write:utf16DecoderWrite,end:utf16DecoderEnd,internalDecoder:null,initialBytes:[],initialBytesLen:0,options:a||{},getCodec:this.getCodec}}function utf16DecoderWrite(a){return this.internalDecoder?this.internalDecoder.write(a):(this.initialBytes.push(a),this.initialBytesLen+=a.length,this.initialBytesLen<16?"":utf16DecoderDecideEndianness.call(this))}function utf16DecoderEnd(){if(this.internalDecoder)return this.internalDecoder.end();var a,b=utf16DecoderDecideEndianness.call(this);return this.internalDecoder&&(a=this.internalDecoder.end()),a&&a.length>0?b+a:b}function utf16DecoderDecideEndianness(){var a=Buffer.concat(this.initialBytes);if(this.initialBytes.length=this.initialBytesLen=0,a.length<2)return"";var b=this.options["default"]||"utf-16be";if(254==a[0]&&255==a[1])b="utf-16be",a=a.slice(2);else if(255==a[0]&&254==a[1])b="utf-16le",a=a.slice(2);else{for(var c=[0,0],d=Math.min(a.length-a.length%2,64),e=0;d>e;e+=2)0==a[e]&&32==a[e+1]&&c[0]++,32==a[e]&&0==a[e+1]&&c[1]++;c[0]>0&&0==c[1]?b="utf-16be":0==c[0]&&c[1]>0&&(b="utf-16le")}return this.internalDecoder=this.getCodec(b).decoder(this.options),this.internalDecoder.write(a)}exports.utf16be=function(a){return{encoder:utf16beEncoder,decoder:utf16beDecoder,bom:new Buffer([254,255])}},exports.utf16=function(a){return{encoder:utf16Encoder,decoder:utf16Decoder,getCodec:a.iconv.getCodec}};