var pathToRegExp=require("./"),assert=require("assert");describe("path-to-regexp",function(){describe("strings",function(){it("should match simple paths",function(){var a=[],b=pathToRegExp("/test",a).exec("/test");assert.equal(a.length,0),assert.equal(b.length,1),assert.equal(b[0],"/test")}),it("should match express format params",function(){var a=[],b=pathToRegExp("/:test",a).exec("/pathname");assert.equal(a.length,1),assert.equal(a[0].name,"test"),assert.equal(a[0].optional,!1),assert.equal(b.length,2),assert.equal(b[0],"/pathname"),assert.equal(b[1],"pathname")}),it("should do strict matches",function(){var a,b=[],c=pathToRegExp("/:test",b,{strict:!0});assert.equal(b.length,1),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!1),a=c.exec("/route"),assert.equal(a.length,2),assert.equal(a[0],"/route"),assert.equal(a[1],"route"),a=c.exec("/route/"),assert.ok(!a)}),it("should do strict matches with trailing slashes",function(){var a,b=[],c=pathToRegExp("/:test/",b,{strict:!0});assert.equal(b.length,1),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!1),a=c.exec("/route"),assert.ok(!a),a=c.exec("/route/"),assert.equal(a.length,2),assert.equal(a[0],"/route/"),assert.equal(a[1],"route"),a=c.exec("/route//"),assert.ok(!a)}),it("should allow optional express format params",function(){var a,b=[],c=pathToRegExp("/:test?",b);assert.equal(b.length,1),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!0),a=c.exec("/route"),assert.equal(a.length,2),assert.equal(a[0],"/route"),assert.equal(a[1],"route"),a=c.exec("/"),assert.equal(a.length,2),assert.equal(a[0],"/"),assert.equal(a[1],void 0)}),it("should allow express format param regexps",function(){var a=[],b=pathToRegExp("/:page(\\d+)",a).exec("/56");assert.equal(a.length,1),assert.equal(a[0].name,"page"),assert.equal(a[0].optional,!1),assert.equal(b.length,2),assert.equal(b[0],"/56"),assert.equal(b[1],"56")}),it("should match without a prefixed slash",function(){var a=[],b=pathToRegExp(":test",a).exec("string");assert.equal(a.length,1),assert.equal(a[0].name,"test"),assert.equal(a[0].optional,!1),assert.equal(b.length,2),assert.equal(b[0],"string"),assert.equal(b[1],"string")}),it("should not match format parts",function(){var a=[],b=pathToRegExp("/:test.json",a).exec("/route.json");assert.equal(a.length,1),assert.equal(a[0].name,"test"),assert.equal(a[0].optional,!1),assert.equal(b.length,2),assert.equal(b[0],"/route.json"),assert.equal(b[1],"route")}),it("should match format parts",function(){var a,b=[],c=pathToRegExp("/:test.:format",b);assert.equal(b.length,2),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!1),assert.equal(b[1].name,"format"),assert.equal(b[1].optional,!1),a=c.exec("/route.json"),assert.equal(a.length,3),assert.equal(a[0],"/route.json"),assert.equal(a[1],"route"),assert.equal(a[2],"json"),a=c.exec("/route"),assert.ok(!a)}),it("should match route parts with a trailing format",function(){var a=[],b=pathToRegExp("/:test.json",a).exec("/route.json");assert.equal(a.length,1),assert.equal(a[0].name,"test"),assert.equal(a[0].optional,!1),assert.equal(b.length,2),assert.equal(b[0],"/route.json"),assert.equal(b[1],"route")}),it("should match optional trailing routes",function(){var a=[],b=pathToRegExp("/test*",a).exec("/test/route");assert.equal(a.length,0),assert.equal(b.length,2),assert.equal(b[0],"/test/route"),assert.equal(b[1],"/route")}),it("should match optional trailing routes after a param",function(){var a,b=[],c=pathToRegExp("/:test*",b);assert.equal(b.length,1),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!1),a=c.exec("/test/route"),assert.equal(a.length,3),assert.equal(a[0],"/test/route"),assert.equal(a[1],"test"),assert.equal(a[2],"/route"),a=c.exec("/testing"),assert.equal(a.length,3),assert.equal(a[0],"/testing"),assert.equal(a[1],"testing"),assert.equal(a[2],"")}),it("should match optional trailing routes before a format",function(){var a,b=[],c=pathToRegExp("/test*.json",b);assert.equal(b.length,0),a=c.exec("/test.json"),assert.equal(a.length,2),assert.equal(a[0],"/test.json"),assert.equal(a[1],""),a=c.exec("/testing.json"),assert.equal(a.length,2),assert.equal(a[0],"/testing.json"),assert.equal(a[1],"ing"),a=c.exec("/test/route.json"),assert.equal(a.length,2),assert.equal(a[0],"/test/route.json"),assert.equal(a[1],"/route")}),it("should match optional trailing routes after a param and before a format",function(){var a,b=[],c=pathToRegExp("/:test*.json",b);assert.equal(b.length,1),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!1),a=c.exec("/testing.json"),assert.equal(a.length,3),assert.equal(a[0],"/testing.json"),assert.equal(a[1],"testing"),assert.equal(a[2],""),a=c.exec("/test/route.json"),assert.equal(a.length,3),assert.equal(a[0],"/test/route.json"),assert.equal(a[1],"test"),assert.equal(a[2],"/route"),a=c.exec(".json"),assert.ok(!a)}),it("should match optional trailing routes between a normal param and a format param",function(){var a,b=[],c=pathToRegExp("/:test*.:format",b);assert.equal(b.length,2),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!1),assert.equal(b[1].name,"format"),assert.equal(b[1].optional,!1),a=c.exec("/testing.json"),assert.equal(a.length,4),assert.equal(a[0],"/testing.json"),assert.equal(a[1],"testing"),assert.equal(a[2],""),assert.equal(a[3],"json"),a=c.exec("/test/route.json"),assert.equal(a.length,4),assert.equal(a[0],"/test/route.json"),assert.equal(a[1],"test"),assert.equal(a[2],"/route"),assert.equal(a[3],"json"),a=c.exec("/test"),assert.ok(!a),a=c.exec(".json"),assert.ok(!a)}),it("should match optional trailing routes after a param and before an optional format param",function(){var a,b=[],c=pathToRegExp("/:test*.:format?",b);assert.equal(b.length,2),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!1),assert.equal(b[1].name,"format"),assert.equal(b[1].optional,!0),a=c.exec("/testing.json"),assert.equal(a.length,4),assert.equal(a[0],"/testing.json"),assert.equal(a[1],"testing"),assert.equal(a[2],""),assert.equal(a[3],"json"),a=c.exec("/test/route.json"),assert.equal(a.length,4),assert.equal(a[0],"/test/route.json"),assert.equal(a[1],"test"),assert.equal(a[2],"/route"),assert.equal(a[3],"json"),a=c.exec("/test"),assert.equal(a.length,4),assert.equal(a[0],"/test"),assert.equal(a[1],"test"),assert.equal(a[2],""),assert.equal(a[3],void 0),a=c.exec(".json"),assert.ok(!a)}),it("should match optional trailing routes inside optional express param",function(){var a,b=[],c=pathToRegExp("/:test*?",b);assert.equal(b.length,1),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!0),a=c.exec("/test/route"),assert.equal(a.length,3),assert.equal(a[0],"/test/route"),assert.equal(a[1],"test"),assert.equal(a[2],"/route"),a=c.exec("/test"),assert.equal(a.length,3),assert.equal(a[0],"/test"),assert.equal(a[1],"test"),assert.equal(a[2],""),a=c.exec("/"),assert.equal(a.length,3),assert.equal(a[0],"/"),assert.equal(a[1],void 0),assert.equal(a[2],void 0)}),it("should do case insensitive matches",function(){var a=pathToRegExp("/test").exec("/TEST");assert.equal(a[0],"/TEST")}),it("should do case sensitive matches",function(){var a,b=pathToRegExp("/test",null,{sensitive:!0});a=b.exec("/test"),assert.equal(a.length,1),assert.equal(a[0],"/test"),a=b.exec("/TEST"),assert.ok(!a)}),it("should do non-ending matches",function(){var a=[],b=pathToRegExp("/:test",a,{end:!1}).exec("/test/route");assert.equal(a.length,1),assert.equal(a[0].name,"test"),assert.equal(a[0].optional,!1),assert.equal(b.length,2),assert.equal(b[0],"/test"),assert.equal(b[1],"test")}),it("should match trailing slashes in non-ending non-strict mode",function(){var a,b=[],c=pathToRegExp("/:test",b,{end:!1});assert.equal(b.length,1),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!1),a=c.exec("/test/"),assert.equal(a.length,2),assert.equal(a[0],"/test/"),assert.equal(a[1],"test")}),it("should match trailing slashes in non-ending non-strict mode",function(){var a,b=[],c=pathToRegExp("/route/",b,{end:!1});assert.equal(b.length,0),a=c.exec("/route/"),assert.equal(a.length,1),assert.equal(a[0],"/route/"),a=c.exec("/route/test"),assert.equal(a.length,1),assert.equal(a[0],"/route"),a=c.exec("/route"),assert.equal(a.length,1),assert.equal(a[0],"/route"),a=c.exec("/route//"),assert.equal(a.length,1),assert.equal(a[0],"/route/")}),it("should match trailing slashing in non-ending strict mode",function(){var a=[],b=pathToRegExp("/route/",a,{end:!1,strict:!0});assert.equal(a.length,0),m=b.exec("/route/"),assert.equal(m.length,1),assert.equal(m[0],"/route/"),m=b.exec("/route/test"),assert.equal(m.length,1),assert.equal(m[0],"/route/"),m=b.exec("/route"),assert.ok(!m),m=b.exec("/route//"),assert.equal(m.length,1),assert.equal(m[0],"/route/")}),it("should not match trailing slashes in non-ending strict mode",function(){var a=[],b=pathToRegExp("/route",a,{end:!1,strict:!0});assert.equal(a.length,0),m=b.exec("/route"),assert.equal(m.length,1),assert.equal(m[0],"/route"),m=b.exec("/route/"),assert.ok(m.length,1),assert.equal(m[0],"/route")}),it("should match text after an express param",function(){var a=[],b=pathToRegExp("/(:test)route",a);assert.equal(a.length,1),assert.equal(a[0].name,"test"),assert.equal(a[0].optional,!1),m=b.exec("/route"),assert.ok(!m),m=b.exec("/testroute"),assert.equal(m.length,2),assert.equal(m[0],"/testroute"),assert.equal(m[1],"test"),m=b.exec("testroute"),assert.ok(!m)}),it("should match text after an optional express param",function(){var a,b=[],c=pathToRegExp("/(:test?)route",b);assert.equal(b.length,1),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!0),a=c.exec("/route"),assert.equal(a.length,2),assert.equal(a[0],"/route"),assert.equal(a[1],void 0),a=c.exec("/testroute"),assert.equal(a.length,2),assert.equal(a[0],"/testroute"),assert.equal(a[1],"test"),a=c.exec("route"),assert.ok(!a)}),it("should match optional formats",function(){var a,b=[],c=pathToRegExp("/:test.:format?",b);assert.equal(b.length,2),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!1),assert.equal(b[1].name,"format"),assert.equal(b[1].optional,!0),a=c.exec("/route"),assert.equal(a.length,3),assert.equal(a[0],"/route"),assert.equal(a[1],"route"),assert.equal(a[2],void 0),a=c.exec("/route.json"),assert.equal(a.length,3),assert.equal(a[0],"/route.json"),assert.equal(a[1],"route"),assert.equal(a[2],"json")}),it("should match full paths with format by default",function(){var a=[],b=pathToRegExp("/:test",a).exec("/test.json");assert.equal(a.length,1),assert.equal(a[0].name,"test"),assert.equal(a[0].optional,!1),assert.equal(b.length,2),assert.equal(b[0],"/test.json"),assert.equal(b[1],"test.json")})}),describe("regexps",function(){it("should return the regexp",function(){assert.deepEqual(pathToRegExp(/.*/),/.*/)})}),describe("arrays",function(){it("should join arrays parts",function(){var a=pathToRegExp(["/test","/route"]);assert.ok(a.test("/test")),assert.ok(a.test("/route")),assert.ok(!a.test("/else"))}),it("should match parts properly",function(){var a,b=[],c=pathToRegExp(["/:test","/test/:route"],b);assert.equal(b.length,2),assert.equal(b[0].name,"test"),assert.equal(b[0].optional,!1),assert.equal(b[1].name,"route"),assert.equal(b[1].optional,!1),a=c.exec("/route"),assert.equal(a.length,3),assert.equal(a[0],"/route"),assert.equal(a[1],"route"),assert.equal(a[2],void 0),a=c.exec("/test/path"),assert.equal(a.length,3),assert.equal(a[0],"/test/path"),assert.equal(a[1],void 0),assert.equal(a[2],"path")})})});