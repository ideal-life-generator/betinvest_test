(function() {
  var delay_check, delay_count, exec, failed_to_stop, res1, res2, t;

  exec = require('../js/sync-exec');

  delay_count = 0;

  delay_check = function() {
    var now;
    now = (new Date).getTime();
    if (!(res1 && res2 && (t + 10000 <= now && now < t + 12000))) {
      throw new Error('Timing error');
    }
    return console.log('DONE');
  };

  t = (new Date).getTime();

  setTimeout(delay_check, 10);

  process.stdout.write('Test #1 (takes ~3 seconds) ... ');

  res1 = exec(__dirname + '/sh/out.sh');

  if (!(res1.stdout === '1\n' && res1.stderr === '' && res1.status === 0)) {
    throw new Error('Result #1 error:\n' + JSON.stringify(res1, null, 2));
  }

  console.log('DONE');

  process.stdout.write('Test #2 (takes ~3 seconds) ... ');

  res2 = exec(__dirname + '/sh/err.sh');

  if (!(res2.stdout === '2\n' && res2.stderr === '3\n' && res2.status === 1)) {
    throw new Error('Result #2 error:\n' + JSON.stringify(res2, null, 2));
  }

  console.log('DONE');

  process.stdout.write('Test #3 (takes ~1 second) ... ');

  try {
    exec(__dirname + '/sh/out.sh', 1000);
    failed_to_stop = true;
  } catch (_error) {}

  if (failed_to_stop) {
    throw new Error('Failed timeout');
  }

  console.log('DONE');

  process.stdout.write('Test #4 (takes ~3 second) ... ');

  exec('./out.sh', {
    cwd: __dirname + '/sh'
  });

  console.log('DONE');

  process.stdout.write('Test #5 ... ');

}).call(this);
